I am building an Audit Survey application in Spring Boot using MongoDB.  
I need to implement REST APIs for managing **survey templates** with versioning.  
Each template version is a separate document in the `surveyTemplates` collection.  

## Collection Schema (MongoDB)

surveyTemplates:
- _id: string (format: {templateId}_v{version})
- templateId: string (logical template identifier, e.g. "tpl1")
- version: int (incremental version number)
- status: string (enum: DRAFT | ACTIVE | INACTIVE)
- name: string
- description: string
- questions: array of {
    id: string,
    text: string,
    type: string (RADIO | TEXT),
    options: [{ id: string, text: string }]
  }
- createdAt: datetime

## Required APIs

1. `GET /api/templates`
   - Return all templates (only ACTIVE by default, but allow ?status=ALL query param).
   - Response should group by templateId, returning latest active version info.

4. `POST /api/templates`
   - Create a new template.
   - Request body includes name, description, questions.
   - Default status = DRAFT.
   - Auto-increment version number.


## Requirements

- Use Spring Boot (Java) with Spring Data MongoDB.
- Create an entity/model class `SurveyTemplate`.
- Create a repository interface extending `MongoRepository`.
- Create a service layer for business logic.
- Create a controller exposing the REST endpoints.
- Responses should use DTOs (no direct entity exposure).
- Use standard Spring Boot exception handling (404 if template not found, etc).

Please generate code for the Controller, Service, Repository, and Model classes.
