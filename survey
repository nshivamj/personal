Survey Application — Reference Specification
🏗️ Architecture

Backend: Spring Boot (Java), MongoDB

Frontend: React 18 + TypeScript + Zustand (state), React Router

Infra: Already set up by you (services + Mongo)

📂 MongoDB Collections
1. surveyTemplates
{
  "_id": "tpl1-v2",
  "templateId": "tpl1",
  "version": 2,
  "name": "Audit Feedback Template",
  "questions": [
    {
      "questionId": "q1",
      "text": "Did you review the project plan?",
      "type": "RADIO",
      "options": [
        { "id": "1", "text": "Yes" },
        { "id": "2", "text": "No" }
      ]
    },
    {
      "questionId": "q2",
      "text": "Any blockers?",
      "type": "TEXT"
    }
  ],
  "isActive": true,
  "createdAt": "2025-10-08T09:00:00Z"
}

2. surveys
{
  "_id": "6501a1",
  "surveyId": "6501a1",
  "code": "SURV-2025-001",
  "name": "Q4 Audit Survey",
  "type": "PROJECT",
  "projectCode": "PRJ1001",
  "createdBy": "sjain",
  "templateId": "tpl1",
  "templateVersion": 2,
  "status": "OPEN",
  "deadline": "2025-10-15T00:00:00Z",
  "assignments": [
    { "assignee": "user200", "status": "SUBMITTED", "emailStatus": "SENT" },
    { "assignee": "user201", "status": "DRAFT", "emailStatus": "SENT" },
    { "assignee": "user202", "status": "PENDING", "emailStatus": "FAILED" }
  ],
  "createdAt": "2025-10-08T09:00:00Z",
  "updatedAt": "2025-10-11T12:00:00Z"
}

3. surveyResponses
{
  "_id": "resp1",
  "surveyId": "6501a1",
  "assignee": "user200",
  "status": "SUBMITTED",
  "answers": [
    { "questionId": "q1", "answerOptionIds": ["1"], "answerText": null },
    { "questionId": "q2", "answerOptionIds": [], "answerText": "We had blockers" }
  ],
  "submittedAt": "2025-10-08T12:00:00Z"
}

🌐 APIs
Template APIs

GET /api/templates → list templates (latest versions, active flag)

Survey APIs

POST /api/surveys → create survey from template + assignees + deadline

GET /api/surveys → list surveys (filter: owner/admin)

GET /api/surveys/{id} → get survey detail (metadata + assignments with status)

Response APIs

POST /api/surveys/{id}/responses → save/submit answers for assignee

GET /api/surveys/{id}/responses → raw responses (per user, for admin only)

Summary APIs

GET /api/surveys/{id}/summary → aggregated analytics per question

🎨 Frontend Screens
👤 User (Assignee)

Survey Page

Fetch survey metadata & assigned questions

Render dynamic question form (SurveyForm)

Support Draft Save and Final Submit

After submit → answers read-only

👑 Owner (Project Owner / Admin-lite)

Survey Dashboard (Owner)

Header summary:

Total Surveys

Active Surveys

Avg Completion %

Actions: Create Survey, Grid/List toggle

Survey grid with columns: Code, Name, Type, Project, Status, Deadline, Progress

Survey Detail (Owner)

Survey metadata

Assignments table (assignee + status + email status)

Progress bar (assigned vs completed)

Survey Create Page

Select template, assignees, deadline, project code

Submit → create new survey

🛠️ Admin (Full View)

Admin Dashboard (all surveys, not just owned ones) → same as Owner but wider scope

Admin Survey Detail

Overview: metadata + assignments + progress

Responses tab: all raw responses per user

Summary tab: aggregated analytics




Build a Survey Dashboard (Owner) page (/owner/dashboard) in React 18 + TypeScript.
Use Zustand for state management.
API integration should use fetch or Axios with async actions inside the Zustand slice.

Layout

Header Section (first half of page): "Survey Management"

Subtitle: "Create and manage audit surveys for your projects"

Quick Stats (cards / tiles):

Total Surveys = count of surveys returned

Active Surveys = count of surveys with status=OPEN

Avg Completion = average completion across all surveys =
(Σ (completedCount / assignedCount)) / totalSurveys

Buttons:

Create Survey (navigates to /owner/surveys/create)

Grid View / List View toggle (default Grid)

Survey Grid/Table Section (second half of page):

Table columns:

Survey Code

Name

Type (PROJECT / GENERAL)

Project Code

Status (OPEN / CLOSED)

Deadline

Progress (visual bar + fraction like 7/10)

Row click → navigates to Survey Detail (/owner/surveys/:id).

Filters: status, projectCode.

Empty state: “No surveys created yet. Click ‘Create Survey’ to start.”

Loading + error states.

State Management (Zustand slice: surveysSlice)

State:

surveys: Survey[]

loading: boolean

error: string | null

stats: { totalSurveys: number; activeSurveys: number; avgCompletion: number }

Actions:

fetchSurveys(filters?) → calls GET /api/surveys and computes stats from assignments[].


Deliverables

SurveyDashboardOwnerPage.tsx → page with:

Header section with summary + actions

Survey grid/table

useSurveysSlice.ts → Zustand slice with async actions + computed stats

Utility function calculateStats(surveys: Survey[]): SurveyStats

Components: StatsCard.tsx, SurveyTable.tsx
